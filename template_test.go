package main

import (
	"os"
	"strings"
	"testing"

	"github.com/google/go-github/v60/github"
)

func TestRenderTemplate(t *testing.T) {
	os.Setenv("GITHUB_SERVER_URL", "")
	os.Setenv("GITHUB_REPOSITORY", "")
	os.Setenv("GITHUB_RUN_ID", "")
	os.Setenv("GITHUB_RUN_ATTEMPT", "")

	data := RenderTemplateData{
		PullRequests: []github.PullRequest{
			{
				Number: github.Int(1),
			},
			{
				Number: github.Int(2),
			},
		},
		Date: "2021-01-01",
	}

	t.Run("RenderTemplate", func(t *testing.T) {
		template, err := RenderTemplate(nil, data, false)

		if err != nil {
			t.Errorf("RenderTemplate returned error: %v", err)
		}

		if !strings.Contains(template, "Release 2021-01-01") {
			t.Errorf("RenderTemplate returned %v, want %v", template, "2021-01-01")
		}

		if !strings.Contains(template, "#1") {
			t.Errorf("RenderTemplate returned %v, want %v", template, "#1")
		}

		want := "*Automatically generated by [git-pr-release-go](https://github.com/odanado/git-pr-release-go).*"
		if !strings.Contains(template, want) {
			t.Errorf("RenderTemplate returned %v, want %v", template, want)
		}
	})

	t.Run("RenderTemplate with disableGeneratedByMessage", func(t *testing.T) {
		template, err := RenderTemplate(nil, data, true)

		if err != nil {
			t.Errorf("RenderTemplate returned error: %v", err)
		}

		if strings.Contains(template, "Automatically generated by") {
			t.Errorf("RenderTemplate returned %v, want %v", template, "Automatically generated by")
		}
	})

	t.Run("RenderTemplate with env", func(t *testing.T) {
		os.Setenv("GITHUB_SERVER_URL", "https://github.com")
		os.Setenv("GITHUB_REPOSITORY", "odanado/git-pr-release-go")
		os.Setenv("GITHUB_RUN_ID", "8434650280")
		os.Setenv("GITHUB_RUN_ATTEMPT", "1")

		template, err := RenderTemplate(nil, data, false)

		if err != nil {
			t.Errorf("RenderTemplate returned error: %v", err)
		}

		want := " within [GitHub Actions workflow](https://github.com/odanado/git-pr-release-go/actions/runs/8434650280/attempts/1).*"

		if !strings.Contains(template, want) {
			t.Errorf("RenderTemplate returned %v, want %v", template, want)
		}
	})
}

func TestRenderTemplateWithFilename(t *testing.T) {
	data := RenderTemplateData{
		PullRequests: []github.PullRequest{
			{
				Number: github.Int(1),
			},
			{
				Number: github.Int(2),
			},
		},
		Date: "2021-01-01",
	}

	tmpFile, err := os.CreateTemp("", "custom.mustache")
	if err != nil {
		panic(err)
	}
	defer os.Remove(tmpFile.Name())

	filename := tmpFile.Name()
	_, err = tmpFile.Write([]byte("This is custom template"))
	if err != nil {
		panic(err)
	}

	template, err := RenderTemplate(&filename, data, false)

	if err != nil {
		t.Errorf("RenderTemplate returned error: %v", err)
	}

	want := "This is custom template"
	if !strings.Contains(template, want) {
		t.Errorf("RenderTemplate returned %v, want %v", template, want)
	}
}

func TestGetRunUrl(t *testing.T) {
	os.Setenv("GITHUB_SERVER_URL", "https://github.com")
	os.Setenv("GITHUB_REPOSITORY", "odanado/git-pr-release-go")
	os.Setenv("GITHUB_RUN_ID", "8434650280")
	os.Setenv("GITHUB_RUN_ATTEMPT", "1")

	t.Run("GetRunUrl", func(t *testing.T) {
		runUrl := getRunUrl()

		want := "https://github.com/odanado/git-pr-release-go/actions/runs/8434650280/attempts/1"

		if runUrl != want {
			t.Errorf("getRunUrl returned %v, want %v", runUrl, want)
		}
	})

	t.Run("GetRunUrl with empty env", func(t *testing.T) {
		os.Setenv("GITHUB_SERVER_URL", "")

		runUrl := getRunUrl()

		if runUrl != "" {
			t.Errorf("getRunUrl returned %v, want %v", runUrl, "")
		}
	})
}
